package com.swallow.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.swallow.architecture.orm.model.Item;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Item".
*/
public class ItemDao extends AbstractDao<Item, Void> {

    public static final String TABLENAME = "Item";

    /**
     * Properties of entity Item.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", false, "Id");
        public final static Property Name = new Property(1, String.class, "name", false, "Name");
        public final static Property Price = new Property(2, double.class, "price", false, "Price");
        public final static Property DisCount = new Property(3, double.class, "disCount", false, "DisCount");
        public final static Property StickNum = new Property(4, double.class, "stickNum", false, "StockNum");
        public final static Property ImgUrl = new Property(5, String.class, "imgUrl", false, "ImgUrl");
        public final static Property Address = new Property(6, String.class, "address", false, "Address");
        public final static Property ItemClassId = new Property(7, String.class, "itemClassId", false, "ItemClassId");
        public final static Property Memo = new Property(8, String.class, "memo", false, "Memo");
    }


    public ItemDao(DaoConfig config) {
        super(config);
    }
    
    public ItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Item\" (" + //
                "\"Id\" TEXT NOT NULL UNIQUE ," + // 0: id
                "\"Name\" TEXT NOT NULL ," + // 1: name
                "\"Price\" REAL NOT NULL ," + // 2: price
                "\"DisCount\" REAL NOT NULL ," + // 3: disCount
                "\"StockNum\" REAL NOT NULL ," + // 4: stickNum
                "\"ImgUrl\" TEXT," + // 5: imgUrl
                "\"Address\" TEXT," + // 6: address
                "\"ItemClassId\" TEXT NOT NULL ," + // 7: itemClassId
                "\"Memo\" TEXT);"); // 8: memo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Item\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Item entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getName());
        stmt.bindDouble(3, entity.getPrice());
        stmt.bindDouble(4, entity.getDisCount());
        stmt.bindDouble(5, entity.getStickNum());
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(6, imgUrl);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
        stmt.bindString(8, entity.getItemClassId());
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(9, memo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Item entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getId());
        stmt.bindString(2, entity.getName());
        stmt.bindDouble(3, entity.getPrice());
        stmt.bindDouble(4, entity.getDisCount());
        stmt.bindDouble(5, entity.getStickNum());
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(6, imgUrl);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(7, address);
        }
        stmt.bindString(8, entity.getItemClassId());
 
        String memo = entity.getMemo();
        if (memo != null) {
            stmt.bindString(9, memo);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Item readEntity(Cursor cursor, int offset) {
        Item entity = new Item( //
            cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.getDouble(offset + 2), // price
            cursor.getDouble(offset + 3), // disCount
            cursor.getDouble(offset + 4), // stickNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // imgUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // address
            cursor.getString(offset + 7), // itemClassId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // memo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Item entity, int offset) {
        entity.setId(cursor.getString(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setPrice(cursor.getDouble(offset + 2));
        entity.setDisCount(cursor.getDouble(offset + 3));
        entity.setStickNum(cursor.getDouble(offset + 4));
        entity.setImgUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAddress(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setItemClassId(cursor.getString(offset + 7));
        entity.setMemo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Item entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Item entity) {
        return null;
    }

    @Override
    public boolean hasKey(Item entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
